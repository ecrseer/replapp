{"version":3,"sources":["const/icone-tela-android.jpg","components/CopyButton.js","components/TextField.js","components/TextFColor.js","components/InfoBoard.js","const/contento.js","containers/main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","copyButton","copyInfo","testez","Button","variant","color","onClick","theme","createMuiTheme","palette","primary","main","green","secondary","purple","useStyles","makeStyles","root","textField","padding","LayoutTextFields","answer","theChange","useState","show","setShow","entrad","useRef","classes","ThemeProvider","className","TextField","id","label","autoFocus","placeholder","ref","margin","InputLabelProps","shrink","focused","InputProps","onChange","value","navigator","clipboard","writeText","console","log","style","cursor","withStyles","borderBottomColor","borderColor","memo","Paper","elevation","Typography","component","src","imgjp","alt","width","Myindex","camp","setCamp","timer","setTimer","errin","setErrin","styled","div","fontSize","titulo","gutterBottom","indx","marginTop","target","clearTimeout","setTimeout","tValue","replaceAll","ex","replace","RegExp","replacer","fedeu","Alert","severity","useEffect","InfoBoard","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a40b4bf5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icone-tela-android.0b35598a.jpg\";","\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\n  export default function copyButton ({copyInfo,testez}){\r\n    return(\r\n    <div>\r\n      <Button variant=\"contained\" color=\"primary\" \r\n          onClick={copyInfo?copyInfo:()=>{}}>\r\n          Copiar\r\n      </Button> \r\n       \r\n    </div>);\r\n }\r\n\r\n","import React,{useRef, useState} from 'react';\r\nimport { makeStyles\r\n  } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CopyButton from './CopyButton';\r\nimport { Portal } from '@material-ui/core';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { purple,green } from '@material-ui/core/colors';\r\n\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {main: green[500]},\r\n    secondary: {main: purple[500]},\r\n    \r\n    \r\n  },\r\n});\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root:{/* \r\n  display: 'flex',\r\n    flexWrap: 'wrap',\r\n    height: '55ch',\r\n    color:'#fff', */\r\n  },\r\n  textField: { \r\n    padding:'0.5%',\r\n    color:'white'\r\n}\r\n}\r\n));\r\n\r\nexport default function LayoutTextFields( {answer,theChange}) {\r\n  const [show,setShow] = useState(false);\r\n  const entrad = useRef(null);\r\n  const container = useRef(null);\r\n  const copyInfo = ()=>{\r\n    navigator.\r\n     clipboard.writeText(`${answer}`);\r\n     //entrad.addEventListener('mouseenter',e=> entrad.style.border ='5px');\r\n    };\r\n    const segundaA = () =>{\r\n      console.log(show);\r\n        setShow(!show);\r\n    }\r\n  \r\n\r\n  const classes = useStyles();  \r\n  \r\n  return ( <ThemeProvider theme={theme}>\r\n      <div className={classes.root}>\r\n        <TextField\r\n          id=\"filled-full-width\"\r\n          label= \"Digite o texto aqui\" \r\n          //style={{ margin: '8px' }) doesnt work\r\n          color=\"secondary\"\r\n          //className={classes.textField} doesnt work\r\n          autoFocus={true}\r\n          placeholder=\"Digite\"\r\n          ref={entrad}\r\n          margin=\"normal\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n            root: '#aaa',\r\n            focused: '#fff',\r\n            \r\n            \r\n          }}\r\n          InputProps={\r\n            {\r\n              className:classes.textField\r\n          }\r\n        }\r\n          variant=\"filled\"\r\n          onChange= {theChange? theChange : ()=>{} }\r\n          \r\n        />  \r\n         \r\n         <TextField\r\n          id=\"filled-full-width\"\r\n          label= \"Result\" \r\n          //style={{ margin: '8px' }) doesnt work\r\n          \r\n          className={classes.textField}\r\n          placeholder=\"Digite\"\r\n          \r\n          margin=\"normal\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n            color: \"primary\"\r\n          }}\r\n          InputProps={\r\n            {\r\n              className:classes.textField\r\n          }\r\n        }\r\n          value={answer?answer:''}\r\n          variant=\"filled\"\r\n        />  <br/>\r\n        <CopyButton  copyInfo={copyInfo} testez={segundaA} style={{ cursor: 'not-allowed' }}/>\r\n         \r\n         \r\n         \r\n        </div>\r\n        </ThemeProvider>\r\n\r\n        \r\n\r\n  );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { makeStyles,withStyles\r\n  } from '@material-ui/core/styles';\r\nimport TextField from './TextField';\r\n\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    \"& label.Mui-focused\": {\r\n      color: \"green\"\r\n    },\r\n    \"& .MuiInput-underline:after\": {\r\n      borderBottomColor: \"green\"\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        borderColor: \"red\"\r\n      },\r\n      \"&:hover fieldset\": {\r\n        borderColor: \"yellow\"\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"green\"\r\n      }\r\n    }\r\n  }\r\n})(TextField);\r\n\r\nconst colorizd = () =>{\r\n  return (\r\n  <CssTextField\r\n        \r\n        id=\"custom-css-standard-input\"\r\n        label=\"Custom CSS\"\r\n      />\r\n  )\r\n}\r\nexport default colorizd;","import Typography from '@material-ui/core/Typography';\r\n\r\n import React,{memo} from 'react'; \r\n \r\n import Paper from '@material-ui/core/Paper';\r\n import testosinho from '../const/contento';\r\n import imgjp from '../const/icone-tela-android.jpg';\r\n\r\n function infoBoard(){\r\n  return(\r\n    <div className=\"mb-3\">\r\n  <Paper elevation={3} >\r\n      <div> \r\n        <Typography variant=\"h5\" component=\"span\" color=\"secondary\">É uma ferramenta</Typography><br/>\r\n        <Typography variant=\"h6\" component=\"span\" color=\"primary\">que também é app</Typography><br/>\r\n        <img src={imgjp} alt=\"adicione a sua tela inicial\" />\r\n        \r\n        <br/>\r\n        <Typography variant=\"body2\" component=\"span\" color=\"primary\">{testosinho}</Typography><br/><br/>\r\n        \r\n \r\n\r\n        \r\n      </div>\r\n    </Paper>\r\n   <Typography variant=\"caption\" component=\"span\" color=\"#345\" width=\"2%\">Gabriel Justino m. Couto</Typography><br/><br/>\r\n   </div>\r\n  );\r\n\r\n }\r\n\r\n export default memo(infoBoard);","import { TableSortLabel } from \"@material-ui/core\";\r\n\r\nconst textosinho = \"adicione essa página a sua pagina inicial com o Chrome para usar como aplicativo \";\r\n\r\nexport default textosinho;","\r\nimport React from 'react';\r\nimport  TextFl  from '../../components/TextField';\r\nimport Colorizd from '../../components/TextFColor';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { useEffect,useState } from 'react';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport styled from 'styled-components';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InfoBoard from '../../components/InfoBoard';\r\n\r\n\r\n\r\n\r\n \r\n\r\nfunction Myindex (){\r\n  const [camp,setCamp] = useState('______');  \r\n  const [timer,setTimer] = useState();\r\n  const [errin,setErrin] = useState(false);\r\n \r\n \r\n\r\n  const handleChange2 = ({target})=>{\r\n    let tim = timer; //1400\r\n    clearTimeout(tim); //0\r\n    setTimer(setTimeout(()=>replacer(target.value),1000));\r\n    \r\n  } \r\n  \r\n\r\n\r\n  function replacer(tValue){\r\n    try{\r\n      tValue = tValue.replaceAll('_',' ');\r\n      \r\n      setCamp(tValue); \r\n      \r\n    }catch(ex){\r\n      if(!errin){\r\n        setErrin(true);\r\n        tValue.replace\r\n        (new RegExp('_', 'g'), ' k');\r\n\r\n      }\r\n    }\r\n     \r\n    \r\n  } \r\nconst Divzao = styled.div\r\n  `\r\n  display: inline-block;\r\n  color: palevioletred;\r\n  font-size: 1em;\r\n  margin: 1em;\r\n  padding: 0.25em 1em;\r\n  border: 2px solid palevioletred;\r\n  border-radius: 3px;\r\n  display: block;\r\n`;\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    fontSize: '10px',\r\n    \r\n  },\r\n});\r\nconst classes = useStyles();\r\n       \r\n      const titulo = (\r\n        \r\n\r\n        <div className={classes.root}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n        Removedor de Underlines\r\n      </Typography>\r\n      </div>\r\n      );\r\n       const indx = (\r\n       <div>\r\n         <TextFl style= {{marginTop:'25em',}}  theChange={handleChange2} answer={camp} />\r\n          {errin}\r\n        </div>);\r\n        const fedeu = (\r\n          <Alert severity=\"warning\">Seu navegador é muito antigo -- atualize-o</Alert>\r\n        );\r\n         \r\n\r\n\r\n          useEffect(()=>{\r\n            \r\n          },[]);\r\n  \r\n     \r\n  return(\r\n    <div>\r\n      {titulo}\r\n         {errin? fedeu: <br/>}\r\n        {indx}\r\n        <br/>\r\n        <br/>\r\n          \r\n          <InfoBoard />\r\n         \r\n        \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Myindex;\r\n      ","import React from 'react';\r\nimport './App.css';\r\nimport Myindex from './containers/main';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Myindex/>\r\n      </header>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}