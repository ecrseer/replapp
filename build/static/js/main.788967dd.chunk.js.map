{"version":3,"sources":["components/CopyButton.js","components/TextField.js","components/TextFColor.js","containers/main/index.js","App.js","serviceWorker.js","index.js"],"names":["copyButton","copyInfo","testez","Button","variant","color","onClick","style","marginLeft","useStyles","makeStyles","theme","root","display","flexWrap","height","textField","spacing","marginRight","width","LayoutTextFields","answer","theChange","useState","show","setShow","entrad","useRef","container","classes","className","TextField","id","label","margin","placeholder","ref","InputLabelProps","shrink","onChange","value","navigator","clipboard","writeText","current","console","log","Portal","withStyles","borderBottomColor","borderColor","Myindex","camp","setCamp","setTimer","errin","setErrin","indx","target","clearTimeout","setTimeout","tValue","replaceAll","ex","replacer","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.788967dd.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\n  export default function copyButton ({copyInfo,testez}){\r\n    return(\r\n    <div>\r\n      <Button variant=\"contained\" color=\"primary\" \r\n          onClick={copyInfo?copyInfo:()=>{}}>\r\n          Copiar\r\n      </Button> \r\n       \r\n       \r\n      <Button variant=\"contained\" color=\"secondary\" style={{marginLeft:'1em'}}\r\n          onClick={testez?testez:()=>{}}>\r\n          botao do breno\r\n      </Button>\r\n    </div>);\r\n }\r\n\r\n","import React,{useRef, useState} from 'react';\r\nimport { makeStyles\r\n  } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CopyButton from './CopyButton';\r\nimport { Portal } from '@material-ui/core';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    height: '55ch',\r\n    color:'#fff',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: '25ch',\r\n  },\r\n}));\r\n\r\nexport default function LayoutTextFields( {answer,theChange}) {\r\n  const [show,setShow] = useState(false);\r\n  const entrad = useRef(null);\r\n  const container = useRef(null);\r\n  const copyInfo = ()=>{\r\n    navigator.\r\n     clipboard.writeText(`${answer} and ${entrad.current}`);\r\n     //entrad.addEventListener('mouseenter',e=> entrad.style.border ='5px');\r\n    };\r\n    const segundaA = () =>{\r\n      console.log(show);\r\n        setShow(!show);\r\n    }\r\n  \r\n\r\n  const classes = useStyles();  \r\n  return (   <div className={classes.root}>\r\n        <TextField\r\n          id=\"filled-full-width\"\r\n          label= \"Digite o texto aqui\" \r\n          style={{ margin: 8 }}\r\n          placeholder=\"Digite\"\r\n          ref={entrad}\r\n          margin=\"normal\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"filled\"\r\n          onChange= {theChange? theChange : ()=>{}}\r\n          \r\n        /> \r\n         \r\n        <TextField\r\n          id=\"filled-full-width\"\r\n          label=\"Resposta\"\r\n          style={{ margin: 3 }}\r\n          placeholder=\"Carregando\"\r\n          \r\n          margin=\"normal\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          \r\n          value={answer?answer:''}\r\n          variant=\"filled\"\r\n        /> \r\n        <CopyButton copyInfo={copyInfo} testez={segundaA}/>\r\n         <br/>\r\n         <div>\r\n         {show? (<Portal>\r\n           <h1>so{answer}</h1>\r\n         </Portal>):null}\r\n         </div>\r\n\r\n         <div ref={container}>\r\n            meet my maker\r\n         </div>\r\n          \r\n         \r\n        </div>\r\n\r\n        \r\n\r\n  );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { makeStyles,withStyles\r\n  } from '@material-ui/core/styles';\r\nimport TextField from './TextField';\r\n\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    \"& label.Mui-focused\": {\r\n      color: \"green\"\r\n    },\r\n    \"& .MuiInput-underline:after\": {\r\n      borderBottomColor: \"green\"\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        borderColor: \"red\"\r\n      },\r\n      \"&:hover fieldset\": {\r\n        borderColor: \"yellow\"\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"green\"\r\n      }\r\n    }\r\n  }\r\n})(TextField);\r\n\r\nconst colorizd = () =>{\r\n  return (\r\n  <CssTextField\r\n        \r\n        id=\"custom-css-standard-input\"\r\n        label=\"Custom CSS\"\r\n      />\r\n  )\r\n}\r\nexport default colorizd;","\r\nimport React from 'react';\r\nimport  TextFl  from '../../components/TextField';\r\nimport Colorizd from '../../components/TextFColor';\r\nimport { useEffect,useState } from 'react';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\n\r\n \r\n\r\nfunction Myindex (){\r\n  const [camp,setCamp] = useState('Carregando');  \r\n  const [timer,setTimer] = useState();\r\n  const [errin,setErrin] = useState(null);\r\n \r\n \r\n\r\n  const handleChange2 = ({target})=>{\r\n    setTimer(clearTimeout());\r\n    setTimer(setTimeout(()=>replacer(target.value),1500));\r\n    \r\n  } \r\n  \r\n\r\n\r\n  function replacer(tValue){\r\n    try{\r\n      tValue = tValue.replaceAll('_',' ');\r\n    }catch(ex){\r\n      if(!errin)\r\n        setErrin('true');\r\n    }\r\n    setCamp(tValue);  \r\n    \r\n  } \r\n       \r\n\r\n       const indx = (\r\n       <div>\r\n         <TextFl theChange={handleChange2} answer={camp} />\r\n          {errin}\r\n        </div>);\r\n\r\n\r\n          useEffect(()=>{\r\n            \r\n          },[]);\r\n  \r\n     \r\n  return(\r\n    <div>\r\n        {indx}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Myindex;\r\n      ","import React from 'react';\nimport './App.css';\nimport Myindex from './containers/main';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Myindex/>\n      </header>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}